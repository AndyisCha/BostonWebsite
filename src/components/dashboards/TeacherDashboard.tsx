import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Typography,
  Card,
  CardContent,
  Button,
  Tabs,
  Tab,
  Chip,
  Avatar,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  Divider,
  Badge
} from '@mui/material';
import {
  School,
  People,
  Assignment,
  Grade,
  Comment,
  TrendingUp,
  AccessTime,
  AutoStories,
  Star,
  CheckCircle
} from '@mui/icons-material';
import { KPICard } from '../common/KPICard';
import { DataTable, Column, ActionButton } from '../common/DataTable';
import { GlobalFilter, FilterOption } from '../common/GlobalFilter';
import { CustomLineChart, CustomBarChart } from '../common/Charts';
import { useAuth } from '../../contexts/AuthContext';

interface StudentData {
  id: string;
  name: string;
  email: string;
  level: string;
  recentScore: number;
  avgScore: number;
  testCount: number;
  studyHours: number;
  lastActivity: string;
  status: 'active' | 'inactive';
  pendingComments: number;
}

interface ScoreData {
  name: string;
  value: number;
}

interface CommentTask {
  id: string;
  studentName: string;
  testName: string;
  score: number;
  submittedAt: string;
  priority: 'high' | 'medium' | 'low';
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`teacher-tabpanel-${index}`}
      aria-labelledby={`teacher-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ py: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

export const TeacherDashboard: React.FC = () => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [tabValue, setTabValue] = useState(0);
  const [students, setStudents] = useState<StudentData[]>([]);
  const [scoreData, setScoreData] = useState<ScoreData[]>([]);
  const [commentTasks, setCommentTasks] = useState<CommentTask[]>([]);

  // ÏßÄÏ†ê Ï†ïÎ≥¥ (ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ÏóêÏÑú Í∞ÄÏ†∏Ïò¥)
  const branchName = user?.branchId === 'seoul-gangnam' ? 'ÏÑúÏö∏ Í∞ïÎÇ®Ï†ê' : 'ÏÑúÏö∏ ÌôçÎåÄÏ†ê';

  useEffect(() => {
    const fetchData = () => {
      setTimeout(() => {
        // No students assigned yet - new teacher
        setStudents([]);

        // No score data yet - no students
        setScoreData([
          { name: '9/1', value: 0 },
          { name: '9/5', value: 0 },
          { name: '9/10', value: 0 },
          { name: '9/15', value: 0 },
          { name: '9/20', value: 0 },
          { name: '9/25', value: 0 }
        ]);

        // No comment tasks - no students yet
        setCommentTasks([]);

        setLoading(false);
      }, 1000);
    };

    fetchData();
  }, []);

  const studentColumns: Column<StudentData>[] = [
    {
      id: 'name',
      label: 'ÌïôÏÉù',
      minWidth: 150,
      format: (value: string, row: StudentData) => (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Avatar sx={{ width: 32, height: 32, fontSize: '14px' }}>
            {value.charAt(0)}
          </Avatar>
          <Box>
            <Typography variant="body2" sx={{ fontWeight: 500 }}>
              {value}
            </Typography>
            <Typography variant="caption" color="text.secondary">
              {row.email}
            </Typography>
          </Box>
        </Box>
      )
    },
    {
      id: 'level',
      label: 'ÌòÑÏû¨ Î†àÎ≤®',
      minWidth: 100,
      align: 'center',
      format: (value: string) => (
        <Chip label={value} size="small" color="primary" variant="outlined" />
      )
    },
    {
      id: 'recentScore',
      label: 'ÏµúÍ∑º Ï†êÏàò',
      minWidth: 100,
      align: 'right',
      format: (value: number) => (
        <Typography
          variant="body2"
          sx={{
            fontWeight: 'bold',
            color: value >= 90 ? 'success.main' : value >= 80 ? 'warning.main' : 'error.main'
          }}
        >
          {value}Ï†ê
        </Typography>
      )
    },
    {
      id: 'avgScore',
      label: 'ÌèâÍ∑† Ï†êÏàò',
      minWidth: 100,
      align: 'right',
      format: (value: number) => `${value}Ï†ê`
    },
    {
      id: 'testCount',
      label: 'ÏãúÌóò ÌöüÏàò',
      minWidth: 100,
      align: 'right',
      format: (value: number) => `${value}Ìöå`
    },
    {
      id: 'studyHours',
      label: 'ÌïôÏäµ ÏãúÍ∞Ñ',
      minWidth: 100,
      align: 'right',
      format: (value: number) => `${value}ÏãúÍ∞Ñ`
    },
    {
      id: 'pendingComments',
      label: 'ÎØ∏Ï±ÑÏ†ê',
      minWidth: 100,
      align: 'center',
      format: (value: number) => (
        value > 0 ? (
          <Badge badgeContent={value} color="error">
            <Comment color="action" />
          </Badge>
        ) : (
          <CheckCircle color="success" fontSize="small" />
        )
      )
    },
    {
      id: 'status',
      label: 'ÏÉÅÌÉú',
      minWidth: 100,
      align: 'center',
      format: (value: string) => (
        <Chip
          label={value === 'active' ? 'ÌôúÏÑ±' : 'ÎπÑÌôúÏÑ±'}
          size="small"
          color={value === 'active' ? 'success' : 'default'}
          variant="filled"
        />
      )
    }
  ];

  const studentActions: ActionButton<StudentData>[] = [
    {
      icon: <Grade />,
      label: 'ÏÑ±Ï†Å Í¥ÄÎ¶¨',
      onClick: (row: StudentData) => {
        console.log('ÏÑ±Ï†Å Í¥ÄÎ¶¨:', row.name);
      },
      color: 'primary'
    },
    {
      icon: <Comment />,
      label: 'ÏΩîÎ©òÌä∏ ÏûëÏÑ±',
      onClick: (row: StudentData) => {
        console.log('ÏΩîÎ©òÌä∏ ÏûëÏÑ±:', row.name);
      },
      color: 'secondary',
      hidden: (row: StudentData) => row.pendingComments === 0
    }
  ];

  const totalStudents = students.length;
  const activeStudents = students.filter(s => s.status === 'active').length;
  const avgScore = students.length > 0 ? Math.round(students.reduce((sum, s) => sum + s.avgScore, 0) / students.length) : 0;
  const pendingComments = students.reduce((sum, s) => sum + s.pendingComments, 0);

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'error';
      case 'medium': return 'warning';
      case 'low': return 'info';
      default: return 'default';
    }
  };

  return (
    <Box>
      {/* ÌïÑÌÑ∞ (ÎÇ†ÏßúÎßå ÏÇ¨Ïö©) */}
      <GlobalFilter
        showCountryFilter={false}
        showBranchFilter={false}
        showDateFilter={true}
      />

      {/* Í∞ïÏÇ¨ Ï†ïÎ≥¥ Ìó§Îçî */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Avatar sx={{
                width: 48,
                height: 48,
                backgroundColor: 'secondary.light',
                fontSize: '20px'
              }}>
                üë©‚Äçüè´
              </Avatar>
              <Box>
                <Typography variant="h5" sx={{ fontWeight: 600 }}>
                  {user?.firstName} {user?.lastName} Í∞ïÏÇ¨Îãò
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {branchName} | {user?.email}
                </Typography>
              </Box>
            </Box>
            <Box sx={{ display: 'flex', gap: 1 }}>
              <Button variant="outlined" startIcon={<AutoStories />}>
                E-book Î¨¥Ï†úÌïú Ï†ëÍ∑º
              </Button>
              <Button variant="contained" startIcon={<Comment />} color="secondary">
                Ïò§Îãµ ÏΩîÎ©òÌä∏ ÏûëÏÑ±
              </Button>
            </Box>
          </Box>
        </CardContent>
      </Card>

      {/* KPI Ïπ¥Îìú Í∑∏Î¶¨Îìú */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} md={6} lg={3}>
          <KPICard
            title="ÎÇ¥ ÏßÄÏ†ê ÌïôÏÉù"
            value={totalStudents}
            label="Î™Ö"
            change="0Î™Ö"
            changeType="increase"
            icon={<People />}
            description="Îã¥ÎãπÌïòÎäî ÌïôÏÉù Ïàò"
            loading={loading}
            color="primary"
          />
        </Grid>
        <Grid item xs={12} md={6} lg={3}>
          <KPICard
            title="ÌôúÏÑ± ÌïôÏÉù"
            value={activeStudents}
            label="Î™Ö"
            change="0Î™Ö"
            changeType="increase"
            icon={<School />}
            description="ÏµúÍ∑º ÌôúÎèôÌïú ÌïôÏÉù"
            loading={loading}
            color="success"
          />
        </Grid>
        <Grid item xs={12} md={6} lg={3}>
          <KPICard
            title="ÌèâÍ∑† Ï†êÏàò"
            value={avgScore}
            label="Ï†ê"
            change="0Ï†ê"
            changeType="increase"
            icon={<TrendingUp />}
            description="ÌïôÏÉùÎì§Ïùò ÌèâÍ∑† ÏÑ±Ï†Å"
            loading={loading}
            color="info"
          />
        </Grid>
        <Grid item xs={12} md={6} lg={3}>
          <KPICard
            title="ÎØ∏Ï±ÑÏ†ê ÏΩîÎ©òÌä∏"
            value={pendingComments}
            label="Í∞ú"
            change="0Í∞ú"
            changeType="neutral"
            icon={<Comment />}
            description="ÏûëÏÑ± ÎåÄÍ∏∞ Ï§ëÏù∏ ÏΩîÎ©òÌä∏"
            loading={loading}
            color="warning"
          />
        </Grid>
      </Grid>

      {/* ÌÉ≠ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ */}
      <Card>
        <CardContent sx={{ p: 0 }}>
          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
            <Tabs value={tabValue} onChange={handleTabChange}>
              <Tab label="ÌïôÏÉù ÏÑ±Ï†ÅÌëú" />
              <Tab label="ÏΩîÎ©òÌä∏ ÏûëÏóÖ" />
              <Tab label="ÏÑ±Ï†Å Î∂ÑÏÑù" />
              <Tab label="ÌïôÏäµ ÌòÑÌô©" />
            </Tabs>
          </Box>

          <TabPanel value={tabValue} index={0}>
            {/* ÌïôÏÉù ÏÑ±Ï†ÅÌëú ÌÉ≠ */}
            <DataTable
              columns={studentColumns}
              data={students}
              loading={loading}
              title="ÌïôÏÉù ÏÑ±Ï†Å Í¥ÄÎ¶¨"
              subtitle="Îã¥Îãπ ÌïôÏÉùÎì§Ïùò Ï¢ÖÌï© ÏÑ±Ï†Å ÌòÑÌô©"
              actions={studentActions}
              searchable={true}
              searchPlaceholder="ÌïôÏÉùÎ™Ö ÎòêÎäî Ïù¥Î©îÏùº Í≤ÄÏÉâ..."
              emptyMessage="Îã¥Îãπ ÌïôÏÉùÏù¥ ÏóÜÏäµÎãàÎã§"
              pageSize={10}
            />
          </TabPanel>

          <TabPanel value={tabValue} index={1}>
            {/* ÏΩîÎ©òÌä∏ ÏûëÏóÖ ÌÉ≠ */}
            <Grid container spacing={3}>
              <Grid item xs={12} md={8}>
                <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                  Ïò§Îãµ ÏΩîÎ©òÌä∏ ÏûëÏóÖ ÎåÄÍ∏∞ Î™©Î°ù
                </Typography>
                <List>
                  {commentTasks.map((task, index) => (
                    <React.Fragment key={task.id}>
                      <ListItem
                        sx={{
                          border: 1,
                          borderColor: 'grey.200',
                          borderRadius: 1,
                          mb: 1
                        }}
                      >
                        <ListItemAvatar>
                          <Avatar sx={{ backgroundColor: `${getPriorityColor(task.priority)}.light` }}>
                            <Assignment />
                          </Avatar>
                        </ListItemAvatar>
                        <ListItemText
                          primary={
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <Typography variant="subtitle2">{task.studentName}</Typography>
                              <Chip label={`${task.score}Ï†ê`} size="small" color="primary" />
                              <Chip
                                label={task.priority.toUpperCase()}
                                size="small"
                                color={getPriorityColor(task.priority) as any}
                              />
                            </Box>
                          }
                          secondary={
                            <Box>
                              <Typography variant="body2" color="text.secondary">
                                {task.testName}
                              </Typography>
                              <Typography variant="caption" color="text.secondary">
                                Ï†úÏ∂ú: {task.submittedAt}
                              </Typography>
                            </Box>
                          }
                        />
                        <Button variant="outlined" size="small" startIcon={<Comment />}>
                          ÏΩîÎ©òÌä∏ ÏûëÏÑ±
                        </Button>
                      </ListItem>
                      {index < commentTasks.length - 1 && <Divider />}
                    </React.Fragment>
                  ))}
                </List>
              </Grid>
              <Grid item xs={12} md={4}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                      ÏûëÏóÖ ÌÜµÍ≥Ñ
                    </Typography>
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography variant="body2">Ï¥ù ÎåÄÍ∏∞</Typography>
                        <Chip label={`${commentTasks.length}Í±¥`} size="small" color="warning" />
                      </Box>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography variant="body2">Í∏¥Í∏â Ï≤òÎ¶¨</Typography>
                        <Chip label="0Í±¥" size="small" color="error" />
                      </Box>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography variant="body2">Ïù¥Î≤à Ï£º ÏôÑÎ£å</Typography>
                        <Chip label="0Í±¥" size="small" color="success" />
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          </TabPanel>

          <TabPanel value={tabValue} index={2}>
            {/* ÏÑ±Ï†Å Î∂ÑÏÑù ÌÉ≠ */}
            <Grid container spacing={3}>
              <Grid item xs={12} lg={8}>
                <CustomLineChart
                  data={scoreData}
                  title="Ï£ºÍ∞Ñ ÌèâÍ∑† ÏÑ±Ï†Å Ï∂îÏù¥"
                  subtitle="Îã¥Îãπ ÌïôÏÉùÎì§Ïùò ÏÑ±Ï†Å Î≥ÄÌôî"
                  height={300}
                  color="#2196f3"
                  loading={loading}
                />
              </Grid>
              <Grid item xs={12} lg={4}>
                <CustomBarChart
                  data={students.map(student => ({
                    name: student.name,
                    value: student.avgScore
                  }))}
                  title="ÌïôÏÉùÎ≥Ñ ÌèâÍ∑† Ï†êÏàò"
                  subtitle="Í∞úÎ≥Ñ ÌïôÏÉù ÏÑ±Ï†Å ÎπÑÍµê"
                  height={300}
                  color="#4caf50"
                  loading={loading}
                />
              </Grid>
            </Grid>
          </TabPanel>

          <TabPanel value={tabValue} index={3}>
            {/* ÌïôÏäµ ÌòÑÌô© ÌÉ≠ */}
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                      ÌïôÏäµ ÌôúÎèô ÌòÑÌô©
                    </Typography>
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography variant="body2">Ïò§Îäò Ï†ëÏÜçÌïú ÌïôÏÉù</Typography>
                        <Typography variant="h6" color="primary">0Î™Ö</Typography>
                      </Box>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography variant="body2">Ïù¥Î≤à Ï£º ÏãúÌóò ÏùëÏãú</Typography>
                        <Typography variant="h6" color="success.main">0Ìöå</Typography>
                      </Box>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Typography variant="body2">ÌèâÍ∑† ÌïôÏäµ ÏãúÍ∞Ñ</Typography>
                        <Typography variant="h6" color="warning.main">0Î∂Ñ</Typography>
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={12} md={6}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                      ÏÑ±Í≥º ÏöîÏïΩ
                    </Typography>
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Star color="warning" fontSize="small" />
                        <Typography variant="body2">Îã¥Îãπ ÌïôÏÉùÏù¥ ÏïÑÏßÅ ÏóÜÏäµÎãàÎã§</Typography>
                      </Box>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <TrendingUp color="success" fontSize="small" />
                        <Typography variant="body2">ÌïôÏÉùÏù¥ Î∞∞Ï†ïÎêòÎ©¥ ÏÑ±Í≥ºÎ•º ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§</Typography>
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          </TabPanel>
        </CardContent>
      </Card>
    </Box>
  );
};